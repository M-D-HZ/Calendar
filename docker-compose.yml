version: "3.9"
services:
  calendar:
    container_name: calendar-service
    build:
      context: ./backend/calendar
      dockerfile: Dockerfile
    ports:
      - 5000:8000   
    depends_on:
      - calendar-db 
    environment:
      - POSTGRES_DB=${CALENDAR_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
      - POSTGRES_HOST=${CALENDAR_DB_HOST?}
    networks:
      - calendar-db-network
      - frontend-calendar
    develop:
      watch:
        - action: sync
          path: ./backend/calendar
          target: /app
  
  calendar-db:
    container_name: calendar-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - 5431:5432
    environment:
      - POSTGRES_DB=${CALENDAR_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
    networks:
      calendar-db-network:
        aliases: ["${CALENDAR_DB_HOST?}"]
    volumes:
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/calendar/calendar.sql:/docker-entrypoint-initdb.d/init.sql
      - calendar-data-db:/var/lib/postgresql/data
  
  events:
    container_name: events-service
    build:
      context: ./backend/events
      dockerfile: Dockerfile
    ports:
      - 5001:8000   
    depends_on:
      - events-db
    environment:
      - POSTGRES_DB=${EVENTS_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
      - POSTGRES_HOST=${EVENTS_DB_HOST?}
    networks:
      - events-db-network
      - frontend-events
    develop:
      watch:
        - action: sync
          path: ./backend/events
          target: /app
    
  events-db:
    container_name: events-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${EVENTS_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
    networks:
      events-db-network:
        aliases: ["${EVENTS_DB_HOST?}"]
    volumes:
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/events/events.sql:/docker-entrypoint-initdb.d/init.sql
      - events-data-db:/var/lib/postgresql/data
  
  engagement:
    container_name: engagement-service
    build: 
      context: ./backend/engagement
      dockerfile: Dockerfile
    ports:
      - 5002:8000   
    depends_on:
      - engagement-db
    environment:
      - POSTGRES_DB=${ENGAGEMENT_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
      - POSTGRES_HOST=${ENGAGEMENT_DB_HOST?}
    networks:
      - engagement-db-network
      - frontend-engagement
    develop:
      watch:
        - action: sync
          path: ./backend/engagement
          target: /app
  
  engagement-db: 
    container_name: engagement-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - 5433:5432
    environment:
      - POSTGRES_DB=${ENGAGEMENT_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
    networks:
      engagement-db-network:
        aliases: ["${ENGAGEMENT_DB_HOST?}"]
    volumes:
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/engagement/engagement.sql:/docker-entrypoint-initdb.d/init.sql
      - engagement-data-db:/var/lib/postgresql/data
  
  auth:
    container_name: auth-service
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    ports:
      - 5003:8000   
    depends_on:
      - auth-db
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
      - POSTGRES_HOST=${AUTH_DB_HOST?}
    networks:
      - auth-db-network
      - frontend-auth
    develop:
      watch:
        - action: sync
          path: ./backend/auth
          target: /app
  
  auth-db:
    container_name: auth-db
    hostname: db
    image: postgres:16.2-bookworm
    ports:
      - 5434:5432
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME?}
      - POSTGRES_USER=${DB_USER?}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}
    networks:
      auth-db-network:
        aliases: ["${AUTH_DB_HOST?}"]
    volumes:
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/users/users.sql:/docker-entrypoint-initdb.d/init.sql
      - users-data-db:/var/lib/postgresql/data

  frontend:
    container_name: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./frontend:/app
    networks:
      - frontend-auth
      - frontend-calendar
      - frontend-events
      - frontend-engagement
    depends_on:
      - auth
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
  

volumes:
  calendar-data-db: {}
  events-data-db: {}
  engagement-data-db: {}
  users-data-db: {}

networks:
  auth-db-network: {}
  calendar-db-network: {}
  events-db-network: {}
  engagement-db-network: {}
  frontend-auth: {}
  frontend-calendar: {}
  frontend-events: {}
  frontend-engagement: {}
